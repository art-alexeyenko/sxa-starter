---
description: Getting started with your Sitecore Content SDK Next.js App Router project
alwaysApply: true
globs: []
---

# Sitecore Content SDK Next.js App Router Project

## Project Overview

This is a Sitecore Content SDK application built with Next.js App Router. This project uses the latest Next.js features for improved performance and developer experience.

Key Technologies:

- Next.js App Router (React Server Components)
- Sitecore Content SDK
- TypeScript
- Sitecore XM Cloud
- next-intl for internationalization

## Getting Started

Development Workflow:

1. Install dependencies: `npm install`
2. Configure environment variables (copy `.env.example` to `.env.local`)
3. Start development server: `npm run dev`
4. Build for production: `npm run build`

App Router Specifics:

- Server Components by default
- Client Components when interactivity needed
- File-based routing in `src/app/` directory
- Layout files for shared UI elements

## Project Structure

```
src/
  app/                 # App Router pages and layouts
  components/          # React-specific SDK
  lib/                 # Configuration and utilities
  i18n/                # Internationalization setup
```

Component Development:

- Server Components for data fetching and static content
- Client Components for interactivity (use 'use client')
- Shared components in `src/components/`
- Follow Sitecore field handling patterns

## App Router Best Practices

Server vs Client Components:

- Use Server Components for Sitecore content rendering
- Use Client Components for user interactions
- Minimize client-side JavaScript
- Leverage server-side data fetching

Routing and Layouts:

- Use layout.tsx for shared page structure
- Implement loading.tsx for loading states
- Create error.tsx for error boundaries
- Use page.tsx for route content

## Sitecore Integration

Content Rendering:

- Fetch Sitecore data in Server Components
- Use layout service for page structure
- Handle content preview scenarios
- Implement proper error handling

Performance:

- Leverage Server Components for better performance
- Use streaming for improved loading experience
- Implement proper caching strategies
- Optimize images with Next.js Image component

## Development Commands

```bash
npm run dev          # Start development server
npm run build        # Build for production
npm run start        # Start production server
npm run lint         # Run ESLint
npm run type-check   # Run TypeScript compiler
```

## Environment Configuration

- Copy `.env.example` to `.env.local`
- Add your Sitecore API endpoint and key
- Configure site name and locale settings
- Set up internationalization if needed

## Next Steps

1. Configure your Sitecore connection
2. Set up internationalization (if needed)
3. Create your first Server Component
4. Add content types and templates
5. Implement your layout structure
6. Deploy to your hosting platform

Referenced:
@src/app/
@src/components/
@sitecore.config.ts
@src/i18n/
